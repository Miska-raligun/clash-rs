{"$message_type":"diagnostic","message":"fields `port` and `proxies` are never read","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/config.rs","byte_start":78,"byte_end":84,"line_start":5,"line_end":5,"column_start":12,"column_end":18,"is_primary":false,"text":[{"text":"pub struct Config {","highlight_start":12,"highlight_end":18}],"label":"fields in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/config.rs","byte_start":95,"byte_end":99,"line_start":6,"line_end":6,"column_start":9,"column_end":13,"is_primary":true,"text":[{"text":"    pub port:Option<u16>,","highlight_start":9,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/config.rs","byte_start":189,"byte_end":196,"line_start":9,"line_end":9,"column_start":9,"column_end":16,"is_primary":true,"text":[{"text":"    pub proxies: Option<Vec<Proxy>>,","highlight_start":9,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`Config` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(dead_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: fields `port` and `proxies` are never read\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/config.rs:6:9\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Config {\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mfields in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub port:Option<u16>,\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub proxies: Option<Vec<Proxy>>,\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `Config` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(dead_code)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"fields `name`, `server`, `port`, `cipher`, and `password` are never read","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/config.rs","byte_start":322,"byte_end":333,"line_start":16,"line_end":16,"column_start":5,"column_end":16,"is_primary":false,"text":[{"text":"    Shadowsocks {","highlight_start":5,"highlight_end":16}],"label":"fields in this variant","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/config.rs","byte_start":344,"byte_end":348,"line_start":17,"line_end":17,"column_start":9,"column_end":13,"is_primary":true,"text":[{"text":"        name: String,","highlight_start":9,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/config.rs","byte_start":366,"byte_end":372,"line_start":18,"line_end":18,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"        server: String,","highlight_start":9,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/config.rs","byte_start":390,"byte_end":394,"line_start":19,"line_end":19,"column_start":9,"column_end":13,"is_primary":true,"text":[{"text":"        port: u16,","highlight_start":9,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/config.rs","byte_start":409,"byte_end":415,"line_start":20,"line_end":20,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"        cipher: String,","highlight_start":9,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/config.rs","byte_start":433,"byte_end":441,"line_start":21,"line_end":21,"column_start":9,"column_end":17,"is_primary":true,"text":[{"text":"        password: String,","highlight_start":9,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`Proxy` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: fields `name`, `server`, `port`, `cipher`, and `password` are never read\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/config.rs:17:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Shadowsocks {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mfields in this variant\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        name: String,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        server: String,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        port: u16,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        cipher: String,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        password: String,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `Proxy` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused `Result` that must be used","code":{"code":"unused_must_use","explanation":null},"level":"warning","spans":[{"file_name":"/home/mio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.45.0/src/macros/try_join.rs","byte_start":5704,"byte_end":7974,"line_start":153,"line_end":214,"column_start":9,"column_end":17,"is_primary":true,"text":[{"text":"        poll_fn(move |cx| {","highlight_start":9,"highlight_end":28},{"text":"            const COUNT: u32 = $($total)*;","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let mut is_pending = false;","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let mut to_run = COUNT;","highlight_start":1,"highlight_end":36},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // The number of futures that will be skipped in the first loop iteration","highlight_start":1,"highlight_end":86},{"text":"            let mut skip = skip_next_time;","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            skip_next_time = if skip + 1 == COUNT { 0 } else { skip + 1 };","highlight_start":1,"highlight_end":75},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // This loop runs twice and the first `skip` futures","highlight_start":1,"highlight_end":65},{"text":"            // are not polled in the first iteration.","highlight_start":1,"highlight_end":54},{"text":"            loop {","highlight_start":1,"highlight_end":19},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                if skip == 0 {","highlight_start":1,"highlight_end":31},{"text":"                    if to_run == 0 {","highlight_start":1,"highlight_end":37},{"text":"                        // Every future has been polled","highlight_start":1,"highlight_end":56},{"text":"                        break;","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    to_run -= 1;","highlight_start":1,"highlight_end":33},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    // Extract the future for this branch from the tuple.","highlight_start":1,"highlight_end":74},{"text":"                    let ( $($skip,)* fut, .. ) = &mut *futures;","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    // Safety: future is stored on the stack above","highlight_start":1,"highlight_end":67},{"text":"                    // and never moved.","highlight_start":1,"highlight_end":40},{"text":"                    let mut fut = unsafe { Pin::new_unchecked(fut) };","highlight_start":1,"highlight_end":70},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    // Try polling","highlight_start":1,"highlight_end":35},{"text":"                    if fut.as_mut().poll(cx).is_pending() {","highlight_start":1,"highlight_end":60},{"text":"                        is_pending = true;","highlight_start":1,"highlight_end":43},{"text":"                    } else if fut.as_mut().output_mut().expect(\"expected completed future\").is_err() {","highlight_start":1,"highlight_end":103},{"text":"                        return Ready(Err(fut.take_output().expect(\"expected completed future\").err().unwrap()))","highlight_start":1,"highlight_end":112},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    // Future skipped, one less future to skip in the next iteration","highlight_start":1,"highlight_end":85},{"text":"                    skip -= 1;","highlight_start":1,"highlight_end":31},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            )*","highlight_start":1,"highlight_end":15},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            if is_pending {","highlight_start":1,"highlight_end":28},{"text":"                Pending","highlight_start":1,"highlight_end":24},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                Ready(Ok(($({","highlight_start":1,"highlight_end":30},{"text":"                    // Extract the future for this branch from the tuple.","highlight_start":1,"highlight_end":74},{"text":"                    let ( $($skip,)* fut, .. ) = &mut futures;","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    // Safety: future is stored on the stack above","highlight_start":1,"highlight_end":67},{"text":"                    // and never moved.","highlight_start":1,"highlight_end":40},{"text":"                    let mut fut = unsafe { Pin::new_unchecked(fut) };","highlight_start":1,"highlight_end":70},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    fut","highlight_start":1,"highlight_end":24},{"text":"                        .take_output()","highlight_start":1,"highlight_end":39},{"text":"                        .expect(\"expected completed future\")","highlight_start":1,"highlight_end":61},{"text":"                        .ok()","highlight_start":1,"highlight_end":30},{"text":"                        .expect(\"expected Ok(_)\")","highlight_start":1,"highlight_end":50},{"text":"                },)*)))","highlight_start":1,"highlight_end":24},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }).await","highlight_start":1,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/mio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.45.0/src/macros/try_join.rs","byte_start":8095,"byte_end":8169,"line_start":220,"line_end":220,"column_start":7,"column_end":81,"is_primary":false,"text":[{"text":"      $crate::try_join!(@{ ($($s)* _) ($($n)* + 1) $($t)* ($($s)*) $e, } $($r)*)","highlight_start":7,"highlight_end":81}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/mio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.45.0/src/macros/try_join.rs","byte_start":8095,"byte_end":8169,"line_start":220,"line_end":220,"column_start":7,"column_end":81,"is_primary":false,"text":[{"text":"      $crate::try_join!(@{ ($($s)* _) ($($n)* + 1) $($t)* ($($s)*) $e, } $($r)*)","highlight_start":7,"highlight_end":81}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/mio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.45.0/src/macros/try_join.rs","byte_start":8249,"byte_end":8287,"line_start":226,"line_end":226,"column_start":9,"column_end":47,"is_primary":false,"text":[{"text":"        $crate::try_join!(@{ () (0) } $($e,)*)","highlight_start":9,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/proxy/socks5.rs","byte_start":2850,"byte_end":2901,"line_start":92,"line_end":92,"column_start":5,"column_end":56,"is_primary":false,"text":[{"text":"    tokio::try_join!(client_to_server,server_to_client);","highlight_start":5,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"tokio::try_join!","def_site_span":{"file_name":"/home/mio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.45.0/src/macros/try_join.rs","byte_start":4043,"byte_end":4064,"line_start":115,"line_end":115,"column_start":7,"column_end":28,"is_primary":false,"text":[{"text":"doc! {macro_rules! try_join {","highlight_start":7,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::try_join!","def_site_span":{"file_name":"/home/mio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.45.0/src/macros/try_join.rs","byte_start":4043,"byte_end":4064,"line_start":115,"line_end":115,"column_start":7,"column_end":28,"is_primary":false,"text":[{"text":"doc! {macro_rules! try_join {","highlight_start":7,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::try_join!","def_site_span":{"file_name":"/home/mio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.45.0/src/macros/try_join.rs","byte_start":4043,"byte_end":4064,"line_start":115,"line_end":115,"column_start":7,"column_end":28,"is_primary":false,"text":[{"text":"doc! {macro_rules! try_join {","highlight_start":7,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::try_join!","def_site_span":{"file_name":"/home/mio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.45.0/src/macros/try_join.rs","byte_start":4043,"byte_end":4064,"line_start":115,"line_end":115,"column_start":7,"column_end":28,"is_primary":false,"text":[{"text":"doc! {macro_rules! try_join {","highlight_start":7,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this `Result` may be an `Err` variant, which should be handled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unused_must_use)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused `Result` that must be used\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/proxy/socks5.rs:92:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m92\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    tokio::try_join!(client_to_server,server_to_client);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this `Result` may be an `Err` variant, which should be handled\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_must_use)]` on by default\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::try_join` which comes from the expansion of the macro `tokio::try_join` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"3 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 3 warnings emitted\u001b[0m\n\n"}
